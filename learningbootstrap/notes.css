/*Bootstrap Notes

Learning bootstrap as I go, instead of via a test project.  
Pertinent, new information will go here as needed.

Version 4.0 is currently in beta.  

Response UI Framework / library with mobile-first design philosophy.

==========

Grid System
	Bootstrap uses a 12 column grid system to map the x/y plane of the page.
	This system is utilized in BS classes with naming convention "col-size-columnCount".
	Where size represents standard breakpoints for devices (mobile, tablet, screens, large screens).

		E.g.  "col-sm-6" means that on small screens, the element is allotted 50% of the screen space.

	Multiple classes are then passed to the element to help define changing behavior based on the viewport.

	Breakoints
		xs < 768px
		sm >= 768px
		md >= 992px
		lg >= 1200px

	So in essence, bootstrap is the reason every WordPress site looks identical, and for the robotic naming convention. 
	The more you know!

	Grid system elements must be used within containers. (logical)

	The offset class is used to offset grid units.
		E.g  .col-sm-offset -2
	This does not reduce the allotted grid size, only placement.  Ideally you want to reduce set units before offsetting, for a zero sum with 12
	The offset also is not tied dynamically to the viewport size. So you have to reset the offset at each breakpoint.
		E.g .col-md-offset-0

	The push / pull classes essentially do the same thing. Redundant usage. Push shifts right, pull shifts left.
	Perhaps pull has value, as offset seems to always shift right.
		col-lg-push-4
		col-lg-pull-4



Containers

	Fixed Containers
		* Built in padding of 15px left and right.
		* Has a fixed width that snaps at breakpoints.

	Fluid Containers
		* Built in padding of 15px left and right.
		* Is always 100% width of the parent element.




Clearfix
	Solves the problem of box elements floating due to height differentials.
	You use this by creating an element with the class after even #d elements
	in the box flow.  
		E.g
			<div 1 class="something">
			<div 2 class="something">
			<div class ="clearfix">
			<div 3 class="something">
			<div 4 class="something">
			<div class = "clearfix">

	A more intelligent way to do this is using pseudo class selector, without adding messy structure.
		E.g
			.something:nth-child(odd) {clear: both;}



Typography

	*Bootstrap defaults to Helvetica New on the body tag. All other elements appear to be set to inherit by default.
	Overriding is as simple as redefining in app css.  

	*It is possible to use h1 - h6 as class identifiers, <span class=h1>Whatever</span>

	*.lead  - Class seems to bold and slightly increase font, for "leading an article..."



List classes
	* .list-unstyled - Removes bullets from <ul> and numbers from <ol>
	* .list-inline - Moves list from vertical to horizontal
	* .dl-horizontal - Changes definition list styling.



Button classes
	They've done some general style changes on the tag.
	Bootstrap then uses a global class for general changes, and contextual classes for specific styling.

	*.btn  - global class for general style changes
	*.btn-default - contextual class default

	Additional contextual classes
		.btn-primary
		.btn-info
		.btn-warning
		.btn-danger
		.btn-success

	Button size classes
	Resize buttons
		.btn-xs
		.btn-sm
		.btn-lg

	Button Behavior
		.active - Button depressed
		.disabled - Button greyed out
			You can also use a tag attribute <button class="btn" disabled="disabled">




Image Classes

	.image-responsive  - Seems to proportionally constrain images to containers. (display:block, max-width:100%, height: auto;)
	.image-circle  - Does what you think
	.image-rounded  - Rounded corners (25%, 25%, 25%, 25%)
	.image-thumbnail  - Seems to add a little padding around images, as well as a border.
	.center-block  - Centers images within their containers, seemingly



Visibility
	Classes that use media queries for visibility (if i'm not doing this via scripts)
	.hidden-xs  - Become hidden as the extra small break point.
	.visible-xs  - Does the opposite.



Dropdown menues
	Bootstrap handles creating dropdowns with classes
	<container class="dropdown">
		<control class="dropdown-toggle" data-toggle="dropdown">
			Label<div class="caret"></div>
		</control>
		<ul class="dropdown-menu">
			<li class="dropdown-header">Choices</li>
			<li>Choice1</li>
			<li>Choice2</li>
			<li>Choice3</li>
		</ul>
	</container>

*/